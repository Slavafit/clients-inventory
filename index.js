require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');
const { google } = require('googleapis');
const fs = require('fs');

const Category = require('./models/Category');
const Product = require('./models/Product');
const User = require('./models/User');
const Order = require('./models/Order');
const { checkAuth, requestPhone } = require('./middlewares/checkAuth');
const { registerAuthHandlers } = require('./handlers/auth');

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ---
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => console.error('MongoDB error:', err.message));

// --- Google Sheets API ---
let sheetsClient = null;
if (process.env.USE_GOOGLE_SHEETS === 'true' && fs.existsSync(process.env.GOOGLE_SHEETS_KEYFILE)) {
  const auth = new google.auth.GoogleAuth({
    keyFile: process.env.GOOGLE_SHEETS_KEYFILE,
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });
  sheetsClient = google.sheets({ version: 'v4', auth });
  console.log('‚úÖ Google Sheets connected');

  // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  (async () => {
    try {
      const sheetId = process.env.GOOGLE_SHEET_ID;
      const res = await sheetsClient.spreadsheets.values.get({
        spreadsheetId: sheetId,
        range: 'Sheet1!A1:D1',
      });
      if (!res.data.values || res.data.values.length === 0) {
        console.log('üÜï –°–æ–∑–¥–∞—é –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...');
        await sheetsClient.spreadsheets.values.update({
          spreadsheetId: sheetId,
          range: 'Sheet1!A1:D1',
          valueInputOption: 'RAW',
          requestBody: {
            values: [['–î–∞—Ç–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–û–ø–∏—Å—å (—Ç–æ–≤–∞—Ä—ã)', '–°—É–º–º–∞']]
          }
        });
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
      }
    } catch (err) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏:', err.message);
    }
  })();
} else {
  console.log('‚ö†Ô∏è Google Sheets disabled or missing keyfile');
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
const bot = new Telegraf(process.env.BOT_TOKEN);

// --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
bot.start(async (ctx) => {
  let user = await User.findOne({ telegramId: ctx.from.id });

// üÜï –í–û–ó–í–†–ê–©–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –¢–ï–õ–ï–§–û–ù–ê!
  if (!user.phone) {
    console.log(`[START DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª, –Ω–æ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é.`);
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã');
    return requestPhone(ctx); // üü¢ –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ Middleware
  }
    
  // 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é.
  console.log(`[START DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∫–∞–∑—ã–≤–∞—é –º–µ–Ω—é.`);
  await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.from.first_name}!`);
  return showMainMenu(ctx);
});


bot.on('contact', async (ctx) => {
  const phone = ctx.message.contact.phone_number;
  await User.findOneAndUpdate({ telegramId: ctx.from.id }, { phone });
  console.log(`[CONTACT DEBUG] 4. –¢–µ–ª–µ—Ñ–æ–Ω ${phone} —É—Å–ø–µ—à–Ω–æ –°–û–•–†–ê–ù–Å–ù.`);
  await ctx.reply(`–í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${phone}`, Markup.removeKeyboard());
  return showMainMenu(ctx);
});

// üü¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–ô –õ–û–ì–ò–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
registerAuthHandlers(bot, User, showMainMenu);

// --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
// –ü–µ—Ä–µ–¥–∞–µ–º –º–æ–¥–µ–ª—å User –≤ —Ñ—É–Ω–∫—Ü–∏—é middleware.
bot.use(checkAuth(User));

// --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async function showMainMenu(ctx) {
  return ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
    ['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
    ['üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä']
  ]).resize());
}

// --- –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∏ ---
async function startNewOrder(ctx) {
  const categories = await Category.find();
  const buttons = categories.map(c => [{ text: `${c.emoji} ${c.name}`, callback_data: `cat_${c._id}` }]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', { reply_markup: { inline_keyboard: buttons } });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä" ---
bot.hears('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', async (ctx) => {
    const user = await User.findOne({ telegramId: ctx.from.id });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ
    user.phone = null; 
    await user.save();
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä. Middleware checkAuth –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
    // –∑–∞–ø—Ä–æ—Å–∏—Ç –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –¥–µ–π—Å—Ç–≤–∏–∏, –Ω–æ –ª—É—á—à–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —è–≤–Ω–æ.
    await ctx.reply('üóë –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.');
    return requestPhone(ctx);
});

// --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ ---
bot.hears('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä', async (ctx) => {
    const user = await User.findOne({ telegramId: ctx.from.id });
    
    user.currentStep = 'awaiting_new_phone'; // üÜï –ù–û–í–´–ô –®–ê–ì –î–ò–ê–õ–û–ì–ê
    await user.save();
    
    return ctx.reply('‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):', Markup.removeKeyboard());
});
// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å" ---
bot.hears('üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();
  await startNewOrder(ctx);
});


// --- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
bot.hears('üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  
  // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const currentPhone = user.phone; 

  // 2. –ù–∞—Ö–æ–¥–∏–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
  const usersWithSamePhone = await User.find({ phone: currentPhone }).select('_id');
  const userIds = usersWithSamePhone.map(u => u._id);

  // 3. –ò—â–µ–º –∑–∞–∫–∞–∑—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –õ–Æ–ë–´–ú –∏–∑ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const orders = await Order.find({ userId: { $in: userIds } }).sort({ timestamp: -1 });
  
  if (!orders.length) return ctx.reply(`üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ–º–µ—Ä–æ–º ${currentPhone}.`);

  let text = `üì¶ –í–∞—à–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ –Ω–æ–º–µ—Ä—É ${currentPhone}):\n\n`;
  orders.forEach((o, i) => {
     text += `#${i + 1} –æ—Ç ${o.timestamp.toLocaleString()} ‚Äî ${o.totalSum.toFixed(2)}‚ÇΩ\n`;
  });
    await ctx.reply(text);
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
bot.action(/cat_.+/, async (ctx) => {
  const categoryId = ctx.match[0].replace('cat_', '');
  const category = await Category.findById(categoryId);
  const products = await Product.find({ categoryId });

  const buttons = products.map(p => [{ text: p.name, callback_data: `prod_${p._id}` }]);
  await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è *${category.emoji} ${category.name}*`, {
    parse_mode: 'Markdown',
    reply_markup: { inline_keyboard: buttons }
  });
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ ---
bot.action(/prod_.+/, async (ctx) => {
  const productId = ctx.match[0].replace('prod_', '');
  const product = await Product.findById(productId);
  const user = await User.findOne({ telegramId: ctx.from.id });

  if (product.name.includes('–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π')) {
    user.currentStep = 'awaiting_custom_product';
    await user.save();
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
  } else {
    user.currentOrder.push({ product: product.name, quantity: 0, total: 0 }); // <--- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø    
    user.currentStep = 'awaiting_quantity';
    await user.save();
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "${product.name}" (–≤ —à—Ç—É–∫–∞—Ö):`);
  }
});

// --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
bot.on('text', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  const text = ctx.message.text.trim();

  switch (user.currentStep) {
    case 'awaiting_custom_product':
      user.currentOrder.push({ product: text, quantity: 0, total: 0 });
      user.currentStep = 'awaiting_quantity';
      await user.save();
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');

    case 'awaiting_quantity':
      const qty = parseInt(text);
      if (!qty || qty <= 0) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.');
      user.currentOrder[user.currentOrder.length - 1].quantity = qty;
      user.currentStep = 'awaiting_total'; // <-- –ò–ó–ú–ï–ù–ï–ù–û: awaiting_price -> awaiting_total
      await user.save();
      return ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ *–æ–±—â—É—é —Å—É–º–º—É* –∑–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19.99):', { parse_mode: 'Markdown' }); // <-- –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞

      case 'awaiting_total':
      const total = parseFloat(text.replace(',', '.'));
      if (isNaN(total) || total < 0) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º total –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
        user.currentOrder[user.currentOrder.length - 1].total = total;
        user.currentStep = 'confirm_order';
        await user.save();
      return showOrderPreview(ctx, user);

      case 'awaiting_new_phone':
        const text = ctx.message.text.trim();
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ—Ç –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        const cleanedText = text.replace(/[^0-9]/g, ''); 
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 9 —Ü–∏—Ñ—Ä (–¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω)
      if (cleanedText.length < 9) {
         return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ –º–µ–Ω–µ–µ 9 —Ü–∏—Ñ—Ä).');
      }

     // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä, –¥–æ–±–∞–≤–ª—è—è '+' –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞)
        let formattedPhone = text.trim();
        if (!formattedPhone.startsWith('+')) {
            formattedPhone = '+' + formattedPhone;
        }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
      user.phone = formattedPhone;
      user.currentStep = 'idle';
      await user.save();
      
      await ctx.reply(`–í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${formattedPhone}`);
      return showMainMenu(ctx);

        default:
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞.
      return ctx.reply('ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
  }
});

// --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∏ ---
async function showOrderPreview(ctx, user) {
    const items = user.currentOrder.map((i, idx) => {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ i.total. –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.
        const itemTotal = i.total && !isNaN(i.total) ? i.total : 0; 
        
        // 2. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        return `${idx + 1}. ${i.product} ‚Äî ${i.quantity}—à—Ç, –≤—Å–µ–≥–æ *${itemTotal.toFixed(2)}‚Ç¨*`;
    }).join('\n');
    // –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –æ–ø–∏—Å–∏ - –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä—É–µ–º total –∏–∑ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    const total = user.currentOrder.reduce((s, i) => s + (parseFloat(i.total) || 0), 0);

  const buttons = user.currentOrder.map((i, idx) => [
    { text: `üóë –£–¥–∞–ª–∏—Ç—å ${i.product}`, callback_data: `del_${idx}` }
  ]);
  buttons.push([
    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'add_more' },
    { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å—å', callback_data: 'send_order' }
  ]);
  buttons.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_order' }]);

  await ctx.reply(`üì¶ –¢–µ–∫—É—â–∞—è –æ–ø–∏—Å—å:\n\n${items}\n\n–ò—Ç–æ–≥–æ: ${total.toFixed(2)}‚Ç¨`, {
    reply_markup: { inline_keyboard: buttons }
  });
}

// --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ–ø–∏—Å–∏ ---
bot.action(/del_\d+/, async (ctx) => {
  const index = parseInt(ctx.match[0].replace('del_', ''));
  const user = await User.findOne({ telegramId: ctx.from.id });

  if (user.currentOrder[index]) {
    user.currentOrder.splice(index, 1);
    await user.save();
    await ctx.answerCbQuery('üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω');
    await showOrderPreview(ctx, user);
  } else {
    await ctx.answerCbQuery('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
});

// --- –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä ---
bot.action('add_more', async (ctx) => {
  await ctx.answerCbQuery();
  await startNewOrder(ctx);
});

// --- –û—Ç–º–µ–Ω–∞ ---
bot.action('cancel_order', async (ctx) => {
  await ctx.answerCbQuery();
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();
  await ctx.reply('‚ùå –û–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  await showMainMenu(ctx);
});

// --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
bot.action('send_order', async (ctx) => {
  await ctx.answerCbQuery();
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user || !user.currentOrder.length) return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.');

  const total = user.currentOrder.reduce((s, i) => s + (parseFloat(i.total) || 0), 0);
  const order = await Order.create({
    userId: user._id,
    items: user.currentOrder,
    totalSum: total
  });

  if (sheetsClient) {
    const values = [
      [new Date().toLocaleString(), user.phone, JSON.stringify(order.items), total]
    ];
    await sheetsClient.spreadsheets.values.append({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: 'Sheet1!A:D',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
  }

  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();

  await ctx.reply('‚úÖ –û–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
  await showMainMenu(ctx);
});

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
});

// --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.launch();
console.log('üöÄ Telegram bot started...');
