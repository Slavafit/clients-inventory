require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');
const { google } = require('googleapis');
const fs = require('fs');

const Category = require('./models/Category');
const Product = require('./models/Product');
const User = require('./models/User');
const Order = require('./models/Order');

// --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ---
mongoose.connect(process.env.MONGO_URI).then(() => console.log('MongoDB connected'));

// --- Google Sheets API ---
let sheetsClient = null;
if (process.env.USE_GOOGLE_SHEETS === 'true' && fs.existsSync(process.env.GOOGLE_SHEETS_KEYFILE)) {
  const auth = new google.auth.GoogleAuth({
    keyFile: process.env.GOOGLE_SHEETS_KEYFILE,
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });
  sheetsClient = google.sheets({ version: 'v4', auth });
  console.log('Google Sheets connected');
}

// --- –ë–æ—Ç ---
const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start(async (ctx) => {
  let user = await User.findOne({ telegramId: ctx.from.id });

  if (!user) {
    user = await User.create({ telegramId: ctx.from.id });
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
      Markup.keyboard([[Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä')]]).oneTime().resize());
  } else if (user.phone) {
    await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.from.first_name}!`);
    return showMainMenu(ctx);
  } else {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
  }
});

bot.on('contact', async (ctx) => {
  const phone = ctx.message.contact.phone_number;
  await User.findOneAndUpdate({ telegramId: ctx.from.id }, { phone });
  await ctx.reply(`–í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${phone}`);
  return showMainMenu(ctx);
});

// --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async function showMainMenu(ctx) {
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
    ['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è']
  ]).resize());
}

// --- –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å ---
bot.hears('üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', async (ctx) => {
  const categories = await Category.find();
  const buttons = categories.map(c => [{ text: `${c.emoji} ${c.name}`, callback_data: `cat_${c._id}` }]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', { reply_markup: { inline_keyboard: buttons } });
});

// --- –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
bot.hears('üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.');

  const orders = await Order.find({ userId: user._id });
  if (!orders.length) return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π.');

  let text = 'üìã –í–∞—à–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n';
  orders.forEach((o, i) => {
    text += `#${i + 1} –æ—Ç ${o.timestamp.toLocaleString()} ‚Äî ${o.total}‚Ç¨\n`;
  });
  await ctx.reply(text);
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
bot.action(/cat_.+/, async (ctx) => {
  const categoryId = ctx.match[0].replace('cat_', '');
  const category = await Category.findById(categoryId);
  const products = await Product.find({ categoryId });

  const buttons = products.map(p => [{ text: p.name, callback_data: `prod_${p._id}` }]);
  await ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è *${category.emoji} ${category.name}*`, {
    parse_mode: 'Markdown',
    reply_markup: { inline_keyboard: buttons }
  });
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ ---
bot.action(/prod_.+/, async (ctx) => {
  const productId = ctx.match[0].replace('prod_', '');
  const product = await Product.findById(productId);

  const user = await User.findOne({ telegramId: ctx.from.id });
  if (product.name.includes('–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π')) {
    user.currentStep = 'awaiting_custom_product';
    await user.save();
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
  } else {
    user.currentOrder.push({ product: product.name });
    user.currentStep = 'awaiting_quantity';
    await user.save();
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "${product.name}":`);
  }
});

// --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ ---
bot.on('text', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');

  const text = ctx.message.text.trim();

  switch (user.currentStep) {
    case 'awaiting_custom_product':
      user.currentOrder.push({ product: text });
      user.currentStep = 'awaiting_quantity';
      await user.save();
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');

    case 'awaiting_quantity':
      const qty = parseInt(text);
      if (!qty || qty <= 0) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.');
      user.currentOrder[user.currentOrder.length - 1].quantity = qty;
      user.currentStep = 'awaiting_price';
      await user.save();
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:');

    case 'awaiting_price':
      const price = parseFloat(text.replace(',', '.'));
      if (isNaN(price)) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
      user.currentOrder[user.currentOrder.length - 1].price = price;
      user.currentStep = 'confirm_order';
      await user.save();

      const items = user.currentOrder.map(i => `${i.product} ‚Äî ${i.quantity}—à—Ç √ó ${i.price}‚Ç¨`).join('\n');
      const total = user.currentOrder.reduce((s, i) => s + i.quantity * i.price, 0);
      return ctx.reply(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å—å:\n\n${items}\n\n–ò—Ç–æ–≥–æ: ${total}‚Ç¨`, Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å—å', 'send_order')],
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'add_more')]
      ]));
  }
});

// --- –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä ---
bot.action('add_more', async (ctx) => {
  await ctx.answerCbQuery();
  return bot.hears('üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å')(ctx);
});

// --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å—å ---
bot.action('send_order', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  const total = user.currentOrder.reduce((s, i) => s + i.quantity * i.price, 0);

  const order = await Order.create({
    userId: user._id,
    items: user.currentOrder,
    total
  });

  // Google Sheets
  if (sheetsClient) {
    const values = [
      [new Date().toISOString(), user.phone, JSON.stringify(order.items), total]
    ];
    await sheetsClient.spreadsheets.values.append({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: 'Sheet1!A:Z',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
  }

  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();

  await ctx.reply('‚úÖ –û–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
  await showMainMenu(ctx);
});

bot.launch();
console.log('Bot started...');
