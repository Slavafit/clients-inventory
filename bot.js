require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');
const { google } = require('googleapis');
const fs = require('fs');

const User = require('./models/User');
const Category = require('./models/Category');
const Product = require('./models/Product');
const Order = require('./models/Order');

// --- MongoDB ---
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('‚úÖ MongoDB connected'))
  .catch(err => console.error('MongoDB error:', err.message)); // –î–æ–±–∞–≤—å—Ç–µ .message
  // –ò–ª–∏ –¥–∞–∂–µ .catch(err => console.error('MongoDB error:', err)); –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞

// --- Google Sheets ---
let sheetsClient = null;
if (process.env.USE_GOOGLE_SHEETS === 'true' && fs.existsSync(process.env.GOOGLE_SHEETS_KEYFILE)) {
  const auth = new google.auth.GoogleAuth({
    keyFile: process.env.GOOGLE_SHEETS_KEYFILE,
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });
  sheetsClient = google.sheets({ version: 'v4', auth });
  console.log('‚úÖ Google Sheets connected');

  // –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç
  (async () => {
    const sheetId = process.env.GOOGLE_SHEET_ID;
    try {
      const res = await sheetsClient.spreadsheets.values.get({
        spreadsheetId: sheetId,
        range: 'Sheet1!A1:D1',
      });
      if (!res.data.values || res.data.values.length === 0) {
        await sheetsClient.spreadsheets.values.update({
          spreadsheetId: sheetId,
          range: 'Sheet1!A1:D1',
          valueInputOption: 'RAW',
          requestBody: { values: [['–î–∞—Ç–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–û–ø–∏—Å—å (—Ç–æ–≤–∞—Ä—ã)', '–°—É–º–º–∞']] }
        });
      }
    } catch (err) {
      console.error('Sheets init error:', err.message);
    }
  })();
}

const bot = new Telegraf(process.env.BOT_TOKEN);
const ADMIN_ID = parseInt(process.env.ADMIN_ID || '0', 10);

// --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async function showMainMenu(ctx, user) {
  const mainMenuCommands = ['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'];
  const menu = [
    ['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
  ];
  if (ctx.from.id === ADMIN_ID) menu.push(['‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']);
  return ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', Markup.keyboard(menu).resize());
}

// --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∏ ---
async function showOrderPreview(ctx, user) {
  const items = user.currentOrder.map((i, idx) => `${idx + 1}. ${i.product} ‚Äî ${i.quantity}—à—Ç = ${i.total}‚ÇΩ`).join('\n');
  const totalSum = user.currentOrder.reduce((s, i) => s + i.total, 0);

  const buttons = user.currentOrder.map((i, idx) => [
    { text: `üóë –£–¥–∞–ª–∏—Ç—å ${i.product}`, callback_data: `del_${idx}` }
  ]);
  buttons.push([
    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'add_more' },
    { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å—å', callback_data: 'send_order' }
  ]);
  buttons.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_order' }]);

  await ctx.reply(`üì¶ –¢–µ–∫—É—â–∞—è –æ–ø–∏—Å—å:\n\n${items}\n\nüí∞ –ò—Ç–æ–≥–æ: ${totalSum.toFixed(2)}‚ÇΩ`, {
    reply_markup: { inline_keyboard: buttons }
  });
}

// --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
bot.start(async (ctx) => {
  let user = await User.findOne({ telegramId: ctx.from.id });

  if (!user) {
    user = await User.create({ telegramId: ctx.from.id });
  }

  // –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
  if (user.phone) {
    await ctx.reply(
      `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.from.first_name || '–¥—Ä—É–≥'}!\n–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: ${user.phone}`,
      Markup.keyboard([
        ['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
        ['üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä']
      ]).resize()
    );
    return;
  }

  // –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –µ–≥–æ
  await ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ:\nüì± –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n–∏–ª–∏\n‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +34666777888)',
    Markup.keyboard([[Markup.button.contactRequest('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä')]])
      .oneTime()
      .resize()
  );
});

// --- –ü—Ä–∏—ë–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---
bot.on('contact', async (ctx) => {
  const phone = ctx.message.contact.phone_number;
  const user = await User.findOneAndUpdate(
    { telegramId: ctx.from.id },
    { phone },
    { new: true, upsert: true }
  );

  await ctx.reply(`‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${phone}`);
  return showMainMenu(ctx, user);
});

// --- –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–µ–Ω —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞) ---
// –ó–∞–º–µ–Ω–∏—Ç–µ/–≤—Å—Ç–∞–≤—å—Ç–µ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await User.findOne({ telegramId: ctx.from.id });

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) ‚Äî —Å–æ–∑–¥–∞—ë–º
  if (!user) {
    user = await User.create({ telegramId: ctx.from.id, currentStep: 'idle', currentOrder: [] });
  }
  const mainMenuCommands = ['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä'];
  if (mainMenuCommands.includes(text)) {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é, –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º (return).
     // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (bot.hears) —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–º –ø–æ —Å–µ–±–µ.
      return; 
    }
  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã/–≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ ---
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —è–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  if (text === 'üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä') {
    user.currentStep = 'awaiting_new_phone'; // –ø–æ–º–µ—Ç–∫–∞, —á—Ç–æ –∂–¥—ë–º –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    await user.save();
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: +34666777888), –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:',
      Markup.keyboard([[Markup.button.contactRequest('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')]]).oneTime().resize());
    return;
  }

  // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
  if (user.currentStep === 'awaiting_new_phone') {
    const phoneCandidate = text.replace(/\s+/g, '');
    if (/^\+?\d{7,15}$/.test(phoneCandidate)) {
      user.phone = phoneCandidate;
      user.currentStep = 'idle';
      await user.save();
      await ctx.reply(`‚úÖ –ì–ª–∞–≤–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω: ${phoneCandidate}`, Markup.removeKeyboard());
      return showMainMenu(ctx, user);
    } else {
      return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890');
    }
  }

  // --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª (–Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞) ---
  if (!user.phone) {
    // –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const phoneCandidate = text.replace(/\s+/g, '');
    if (/^\+?\d{7,15}$/.test(phoneCandidate)) {
      user.phone = phoneCandidate;
      user.currentStep = 'idle';
      await user.save();
      await ctx.reply(`‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${phoneCandidate}`, Markup.removeKeyboard());
      return showMainMenu(ctx, user);
    }

    // –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä
    return ctx.reply(
      'üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.',
      Markup.keyboard([[Markup.button.contactRequest('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä')]]).oneTime().resize()
    );
  }

  // --- –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–º–µ—Ä) ---
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∏ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ currentStep
  switch (user.currentStep) {
    case 'awaiting_custom_product':
      // –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é
      user.currentOrder = user.currentOrder || [];
      user.currentOrder.push({ product: text }); // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –∏–º–µ–Ω–µ–º
      user.currentStep = 'awaiting_quantity';
      await user.save();
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):');
      return;

    case 'awaiting_quantity':
      {
        const qty = parseInt(text.replace(/[^0-9]/g, ''), 10);
        if (!qty || qty <= 0) {
          return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (>0).');
        }
        user.currentOrder[user.currentOrder.length - 1].quantity = qty;
        user.currentStep = 'awaiting_total'; // –º—ã –ø—Ä–æ—Å–∏–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞ –ø–æ–∑–∏—Ü–∏—é
        await user.save();
        return ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 199.99):');
      }

    case 'awaiting_total':
      {
        const total = parseFloat(text.replace(',', '.'));
        if (isNaN(total) || total < 0) {
          return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ).');
        }
        user.currentOrder[user.currentOrder.length - 1].total = total;
        user.currentStep = 'confirm_order';
        await user.save();
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ–ø–∏—Å–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é showOrderPreview)
        return showOrderPreview(ctx, user);
      }

    case 'awaiting_phone_for_one_order':
      {
        // –≠—Ç–æ —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –≤—ã —Ä–µ–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–ø–∏—Å–∏
        const phoneCandidate = text.replace(/\s+/g, '');
        if (/^\+?\d{7,15}$/.test(phoneCandidate)) {
          user.tempOrderPhone = phoneCandidate; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–ø–∏—Å–∏
          user.currentStep = 'idle';
          await user.save();
          await ctx.reply(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä ${phoneCandidate} –¥–ª—è —ç—Ç–æ–π –æ–ø–∏—Å–∏.`);
          return showMainMenu(ctx, user);
        } else {
          return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–∞ +71234567890');
        }
      }

    default:
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–æ–≥–æ ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
      // –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ 'üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å' –∏–ª–∏ 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è' ‚Äî —ç—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ bot.hears
      return ctx.reply('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.', Markup.keyboard([['üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', 'üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'], ['üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä']]).resize());
  }
});





// --- –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∏ ---
bot.hears('üì¶ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å—å', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();

  const categories = await Category.find();
  const buttons = categories.map(c => [{ text: `${c.emoji} ${c.name}`, callback_data: `cat_${c._id}` }]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', { reply_markup: { inline_keyboard: buttons } });
});


// --- –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
bot.action(/cat_.+/, async (ctx) => {
  const categoryId = ctx.match[0].replace('cat_', '');
  const products = await Product.find({ categoryId });
  const buttons = products.map(p => [{ text: p.name, callback_data: `prod_${p._id}` }]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', { reply_markup: { inline_keyboard: buttons } });
});

// --- –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ ---
bot.action(/prod_.+/, async (ctx) => {
  const productId = ctx.match[0].replace('prod_', '');
  const product = await Product.findById(productId);
  const user = await User.findOne({ telegramId: ctx.from.id });

  if (product.name.includes('–í–≤–µ—Å—Ç–∏ —Å–≤–æ–π')) {
    user.currentStep = 'awaiting_custom_product';
    await user.save();
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
  } else {
    user.currentOrder.push({ product: product.name });
    user.currentStep = 'awaiting_quantity';
    await user.save();
    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "${product.name}":`);
  }
});



// --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ---
bot.action(/del_\d+/, async (ctx) => {
  const index = parseInt(ctx.match[0].replace('del_', ''));
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.currentOrder.splice(index, 1);
  await user.save();
  await ctx.answerCbQuery('–£–¥–∞–ª–µ–Ω–æ');
  await showOrderPreview(ctx, user);
});

// --- –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ---
bot.action('add_more', async (ctx) => {
  await ctx.answerCbQuery();
  const categories = await Category.find();
  const buttons = categories.map(c => [{ text: `${c.emoji} ${c.name}`, callback_data: `cat_${c._id}` }]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', { reply_markup: { inline_keyboard: buttons } });
});

// --- –û—Ç–º–µ–Ω–∞ –æ–ø–∏—Å–∏ ---
bot.action('cancel_order', async (ctx) => {
  await ctx.answerCbQuery();
  const user = await User.findOne({ telegramId: ctx.from.id });
  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();
  await ctx.reply('‚ùå –û–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  await showMainMenu(ctx, user);
});

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∏ ---
bot.action('send_order', async (ctx) => {
  await ctx.answerCbQuery();
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user.currentOrder.length) return ctx.reply('–û–ø–∏—Å—å –ø—É—Å—Ç–∞.');

  const totalSum = user.currentOrder.reduce((s, i) => s + i.total, 0);
  const order = await Order.create({
    userId: user._id,
    items: user.currentOrder,
    totalSum,
    timestamp: new Date()
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
  if (sheetsClient) {
    const values = [
      [new Date().toLocaleString(), user.phone, JSON.stringify(order.items), totalSum]
    ];
    await sheetsClient.spreadsheets.values.append({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: 'Sheet1!A:D',
      valueInputOption: 'USER_ENTERED',
      requestBody: { values }
    });
  }

  await ctx.reply('‚úÖ –û–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
  user.currentOrder = [];
  user.currentStep = 'idle';
  await user.save();

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
  if (ADMIN_ID) {
    await bot.telegram.sendMessage(ADMIN_ID, `üì¶ –ù–æ–≤–∞—è –æ–ø–∏—Å—å –æ—Ç ${user.phone}\n–ò—Ç–æ–≥–æ: ${totalSum}‚ÇΩ`);
  }

  await showMainMenu(ctx, user);
});

// --- –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
bot.hears('üßæ –ú–æ–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', async (ctx) => {
  const user = await User.findOne({ telegramId: ctx.from.id });
  if (!user) return ctx.reply('–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');

  // –ò—â–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const orders = await Order.find({ userId: user._id }).sort({ timestamp: -1 });

  if (!orders || orders.length === 0) {
      return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø–∏—Å–µ–π.');
  }

  let message = 'üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n';

  orders.slice(0, 10).forEach((order, index) => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
      const total = order.totalSum.toFixed(2);
      const date = order.timestamp.toLocaleDateString('ru-RU');
      
      // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
      const itemsSummary = order.items.map(i => `${i.product} (${i.quantity}—à—Ç)`).join(', ');
      
      message += `**‚Ññ${index + 1} (${date})**\n`;
      message += `–ò—Ç–æ–≥–æ: ${total}‚ÇΩ\n`;
      message += `–¢–æ–≤–∞—Ä—ã: _${itemsSummary}_\n\n`;
  });

  await ctx.reply(message, { parse_mode: 'Markdown' });
});

// --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
bot.hears('‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  const orders = await Order.find().populate('userId');
  if (!orders.length) return ctx.reply('–ù–µ—Ç –æ–ø–∏—Å–∏.');

  let text = 'üìã –í—Å–µ –æ–ø–∏—Å–∏:\n\n';
  orders.forEach((o, i) => {
    text += `${i + 1}. ${o.userId.phone} ‚Äî ${o.totalSum}‚ÇΩ\n`;
  });

  await ctx.reply(text, Markup.inlineKeyboard([
    [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ', callback_data: 'admin_clear' }]
  ]));
});

// --- –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–∏—Å–∏ –∞–¥–º–∏–Ω–æ–º ---
bot.action('admin_clear', async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) return;
  await Order.deleteMany({});
  await ctx.answerCbQuery('–í—Å–µ –æ–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã');
  await ctx.reply('‚úÖ –í—Å—ë –æ—á–∏—â–µ–Ω–æ.');
});

bot.launch();
console.log('üöÄ Bot started');
